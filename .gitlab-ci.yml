before_script:
  - git lfs pull
  - mkdir -p public/images/
  - cp -r docs/images/* public/images/


# Advise GitLab that these environment vars should be loaded from the Variables config.
variables:
    PYPI_USER: SECURE
    PYPI_PASSWORD: SECURE


stages:
  - test
  - deploy_pages
  - deploy_to_pypi
  - cleanup


test_arosics:
  stage: test
  script:
    - source /root/anaconda3/bin/activate
    - export GDAL_DATA=/root/anaconda3/share/gdal
    - export PYTHONPATH=$PYTHONPATH:/root  # /root <- directory needed later
    - make nosetests
    - make docs
  artifacts:
    paths:
    - htmlcov/
    - docs/_build/html/
    - nosetests.html
    - nosetests.xml


test_arosics_install:
  stage: test
  script:
    - source /root/anaconda3/bin/activate
    - conda create -y -q --name arosics python=3.5
    - source activate arosics
    - conda install --yes -c conda-forge numpy gdal scikit-image matplotlib # resolve these requirements with conda
    - python setup.py install
    - cd ..
    - pwd
    - ls
    - python -c "import arosics; print(arosics)"
    - python -c "from arosics import COREG, COREG_LOCAL"


pages:
  stage: deploy_pages
  dependencies:
    - test_arosics
  script:
    - mkdir -p public/coverage
    - cp -r htmlcov/* public/coverage/
    - mkdir -p public/nosetests_reports
    - cp nosetests.* public/nosetests_reports/
    - mkdir -p public/doc
    - cp -r docs/_build/html/* public/doc/

  artifacts:
    paths:
      - public
    expire_in: 30 days
  only:
    - master


deploy_pypi:
  stage: deploy_to_pypi
  dependencies:
    - test_arosics
  script:   # Configure the PyPI credentials, then push the package, and cleanup the creds.
    - source /root/anaconda3/bin/activate
    - mkdir -p public/images/
    - cp -r docs/images/* public/images/
    - printf "[distutils]\nindex-servers =\n    pypi\n\n" >> ~/.pypirc
    - printf "[pypi]\n""repository:"" https://upload.pypi.org/legacy/\n" >> ~/.pypirc
    - printf "username= ${PYPI_USER}\n" >> ~/.pypirc
    - printf "password= ${PYPI_PASSWORD}\n" >> ~/.pypirc
    - python setup.py check sdist upload -r pypi  # This will fail if your creds are bad.
    - echo "" > ~/.pypirc && rm ~/.pypirc  # If the above fails, this won't run.
  only:
    - /^v\d+\.\d+\.\d+([abc]\d*)?$/  # PEP-440 compliant version (tags)
  except:
    - dev


cleanup_pypirc:
   stage: cleanup
   when: always   # this is important; run even if preceding stages failed.
   script:
    - rm -vf ~/.pypirc  # we don't want to leave these around, but GitLab may clean up anyway.
